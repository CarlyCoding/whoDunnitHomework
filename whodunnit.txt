#### Episode 1
```js
const scenario = {
  murderer: 'Miss Scarlet',
  room: 'Library',
  weapon: 'Rope'
};

const declareMurderer = function() {
  return `The murderer is ${scenario.murderer}.`;
}

const verdict = declareMurderer();
console.log(verdict);
```

Expected Result- For this function the scenario is a dictionary, which then is used with the declareMurderer function. The declareMurderer is a const, 
using string interpolation to call the key for "Miss Scarlet". The verdict variable then invokes the declareMurderer function to give 
"The murderer is Miss Scarlet"



#### Episode 2

```js
const murderer = 'Professor Plum';

const changeMurderer = function() {
  murderer = 'Mrs. Peacock';
}

const declareMurderer = function() {
  return `The murderer is ${murderer}.`;
}

changeMurderer();
const verdict = declareMurderer();
console.log(verdict);
```

Expected Result- Likely to be an error message as after murderer is declared using a const a change is then attempted in changeMurderer. Can't change a 
const variable as not allowed in js. 


#### Episode 3

```js
let murderer = 'Professor Plum';

const declareMurderer = function() {
  let murderer = 'Mrs. Peacock';
  return `The murderer is ${murderer}.`;
}

const firstVerdict = declareMurderer();
console.log('First Verdict: ', firstVerdict);

const secondVerdict = `The murderer is ${murderer}.`;
console.log('Second Verdict: ', secondVerdict);
```

Expected Result- In the first line murderer is defined with let to be 'Professor Plum'. This is separate so I am thinking this will be the murderer unless
a new one is declared in a separate code block like in 'declareMurderer'. I think the first verdict will declare Mrs. Peacock as the let has changed in this
code block function. The second verdict should be Professor Plum as that let will be the let used for all the code, unless re-defined.


#### Episode 4

```js
let suspectOne = 'Miss Scarlet';
let suspectTwo = 'Professor Plum';
let suspectThree = 'Mrs. Peacock';

const declareAllSuspects = function() {
  let suspectThree = 'Colonel Mustard';
  return `The suspects are ${suspectOne}, ${suspectTwo}, ${suspectThree}.`;
}

const suspects = declareAllSuspects();
console.log(suspects);
console.log(`Suspect three is ${suspectThree}.`);
```

Expected Result- For this one the 3 suspects are declared with lets so are changeable. In declareAllSuspects suspect three is altered in the code block, 
so the first thing to be returned will be 'The suspects are Miss Scarlett, Professor Plum and Colonel Mustard'. After that function the const suspects is
declared with the same list, so again this will be returned as the same list as before (if called), because the changed let is in the const function. For the last line, 
it will return 'Suspect three is Mrs. Peacock' because that was the original let for three outside the code block. 

#### Episode 5

```js
const scenario = {
  murderer: 'Miss Scarlet',
  room: 'Kitchen',
  weapon: 'Candle Stick'
};

const changeWeapon = function(newWeapon) {
  scenario.weapon = newWeapon;
}

const declareWeapon = function() {
  return `The weapon is the ${scenario.weapon}.`;
}

changeWeapon('Revolver');
const verdict = declareWeapon();
console.log(verdict);
```

Expected Result- For this the scenario is a dict with a const variable. This means scenario ITSELF can't be changed through the code- eg given
a new dictionary. A new function is declared with a const and will be a new weapon for the key weapon if it's called. This is allowed because it's a 
key in the dict but not scenario itsef (if that makes sense?). The next bit of code would probably return the Candle Stick if there wasn't anything 
further. The next bit of code alters the result as changeWeapon is invoked with revolver, which then changes the interpolated declareWeapon 
assigned to verdict. It will finally say 'The weapon is the revolver'.


#### Episode 6

```js
let murderer = 'Colonel Mustard';

const changeMurderer = function() {
  murderer = 'Mr. Green';

  const plotTwist = function() {
    murderer = 'Mrs. White';
  }

  plotTwist();
}

const declareMurderer = function () {
  return `The murderer is ${murderer}.`;
}

changeMurderer();
const verdict = declareMurderer();
console.log(verdict);
```

Expected Result- For this one the murderer is a let, so I know can be changed through the code. The first varable with a const is changeMurderer, changing
the murderer to Mr.Green. This means that the const here is the changeMurderer variable and not the murderer themselves so this can still be changed as
per the next variable to 'Mrs. White' using plotTwist. After the variables plotTwist is invoked in the whole block of code, meaning Mrs. White is
the murderer at this point. Then there is the declareMurderer function, so it'll declare Mrs. White at this point. After this changeMurderer is invoked,
but it won't work because plotTwist with murderer as a const was invoked prior in that block of code, so it can't be changed. Verdict will then return 
'The murderer is Mrs. White'.


#### Episode 7

```js
let murderer = 'Professor Plum';

const changeMurderer = function() {
  murderer = 'Mr. Green';

  const plotTwist = function() {
    let murderer = 'Colonel Mustard';

    const unexpectedOutcome = function() {
      murderer = 'Miss Scarlet';
    }

    unexpectedOutcome();
  }

  plotTwist();
}

const declareMurderer = function() {
  return `The murderer is ${murderer}.`;
}

changeMurderer();
const verdict = declareMurderer();
console.log(verdict);
```

NOTE: For this one I ran the function in js after guessing because I found it difficult to analyse and was unsure. 

Expected Result- For this one I thought the murderer would be Miss Scarlett initally due to the plotTwist being invoked last and looking like it was within a const.
changeMurderer. Also due to the murderer being a let I knew it could be changed. Now after checking the answer I realised that plotTwist is it's own code block 
and the const will be Mr. Green. 


#### Episode 8

```js
const scenario = {
  murderer: 'Mrs. Peacock',
  room: 'Conservatory',
  weapon: 'Lead Pipe'
};

const changeScenario = function() {
  scenario.murderer = 'Mrs. Peacock';
  scenario.room = 'Dining Room';

  const plotTwist = function(room) {
    if (scenario.room === room) {
      scenario.murderer = 'Colonel Mustard';
    }

    const unexpectedOutcome = function(murderer) {
      if (scenario.murderer === murderer) {
        scenario.weapon = 'Candle Stick';
      }
    }

    unexpectedOutcome('Colonel Mustard');
  }

  plotTwist('Dining Room');
}

const declareWeapon = function() {
  return `The weapon is ${scenario.weapon}.`
}

changeScenario();
const verdict = declareWeapon();
console.log(verdict);
```

Expected result- Starting with a const dictionary for scenario then a const for changeScenario variable. In change scenario the room and murderer will be 
changed as the keys can be changed. In the next plotTwist it's saying when the funct is called if what's passed in is equal to the murder room (now dining room?) then
the murderer is colonel mustard. Then the unexpectedOutcome is the same vein but with the murderer being Mrs Peacock (originally) then return the weapon Candle Stick. 
The murderer has changed from the dining room match so Colonel Mustard is passed in to unexpectedOutcome so that changes the murder weapon to candle stick (possibly?)
Because it's all invoked and interpolated as prior examples it should say 'The weapon is candle stick'. I also thought maybe the weapon could be the lead pipe because
of the order eg. Mrs. Peacock is the murderer at the first bit but then I guessed that the murderer would change from the room match and thus change weapon? Sorry this is 
a very rambly thought pattern explanation! 



#### Episode 9

```js
let murderer = 'Professor Plum';

if (murderer === 'Professor Plum') {
  let murderer = 'Mrs. Peacock';
}

const declareMurderer = function() {
  return `The murderer is ${murderer}.`;
}

const verdict = declareMurderer();
console.log(verdict);
```
Expected outcome- For this one the murderer is a let so can be changed. As murderer is P. Plum, the if block now changes it to Mrs. Peacock as it matched the 
=== condition. With declare murderer and verdict variable it should return 'The murderer is Mrs. Peacock'. This seemed too simple though for the last one and now
I'm doubting myself haha.